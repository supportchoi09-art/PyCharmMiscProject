'''
클래스 = 객체를 설계하기 위한 설계도

 * 사람이 객체, 자동차가 객체가 되는 것이다.

클래스에는 속성과 행동이 있다.
속성 : 클래스 내부에 정의된 변수 (객체가 가지는 데이터)
ex) 사람이라면 키랑 몸무게를 가짐 (즉, 그 사람의 속성이라고 생각하면 됨)// 자동차면 브랜드, 타이어 등
매서드 : 클래서 내부에 정의된 함수 (객체가 수행할 수 있는 행동) ex) 사람이 할 수 있는게 걷기, 먹기 등 / 자동차는 달리기

객체 : 클래스라는 설계도를 토대로 만들어진 것 (추상적임)
객체는 상태와 행동을 가진다.
TV 상태                        TV 행동
 @ 가격, 색상, 브랜드 etc    //  볼륨올리기, 채널 바꾸기, 전원끄기

행동
1. 능동적 행동
   => 우리가 TV를 켜고 끄는 기본적인 행동을 말한다. (기본적인 기능을 수행할때 발생한다.)
2. 수동적 행동 (능동적인 행동의 결과값)
==> TV가 꺼진 상태로 유지되는 것

class 클래스이름:
     생성자
     매서드(함수)

클래서 정의 규칙
1. 이름은 대문자로 시작한다.
2. 클래스 내부에 함수(매서드)를 추가하여 행동을 정의한다.

생성자
1.__init__ 매서드  : 객체가 생성될때 자동으로 호출이 되는 생성자이다.
2. 생성자에서는 객체의 초기 속성을 설정한다.
3. self는 현재 생성되는 객체 자신을 가리키는 변수로 클래스 내부 매서드에서 항상 첫 매개변수로 전달된다.

'''

class Person:
    def __init__(self,name,age,nationality):  #이름, 나이, 국적이라는 속성을 가진 것이다. // 우리는 무수히 많이 만들기 위해 사용
        self.name = name
        self.age = age
        self.nationality = nationality

    #매서드도 항상 self를 첫 매개변수로 받는다.
    def introduce(self):
        print(f"이름 : {self.name}, 나이 : {self.age}, 국적 : {self.nationality}") #함수랑 똑같이 생김

# person이 생성될때 self가 정의되기 때문에 첫 매개변수는 self로 받는다.

person1 = Person("최산","27","republic of Korea")
person2 = Person("최지원","24","republic of Korea")
person2 = Person("사카구치 켄타로","35","japan")

#person1~3가 다 객체가 된다. (class를 토대로 만들어진 객체가 되는 것이다.)

print(person1.name) # person1의 이름만 출력이 되게 된다.
person1.introduce()  # 객체가 있어야만 이 함수가 실행되게 된다.

# __init__ 은 가장 먼저 만들어지면서 //  만들어질때 필요한 자동정보를 저장해주는?

#method가 객체가 사용하는 함수 / class 안에 들어간 함수!!
# 일반 함수랑 구분을 할 줄 알야한다.

'''
함수 : class 밖에서 정의하게 된다. (무조건) 
함수이름() : 함수 호출하는 방법

매서드
==> 무조건 클래스 안에서 정의된다.
객체 이름.매서드이름() *self라는 것이 필요하다. 
'''